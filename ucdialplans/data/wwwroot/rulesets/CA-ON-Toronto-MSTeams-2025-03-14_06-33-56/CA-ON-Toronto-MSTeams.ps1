<#
.SYNOPSIS
A script to automatically create custom normalization rules for a Microsoft Teams Enterprise Voice deployment.

.DESCRIPTION
Automates the creation of Microsoft Teams Enterprise Voice dialplans/voice routes/policies etc. for various countries.

This script generated for Toronto, Canada  | 416-557

.PARAMETER OverrideAdminDomain
OPTIONAL The FQDN your Office365 tenant. Use if your admin account is not in the same domain as your tenant (ie. doesn't use a @tenantname.onmicrosoft.com address)

.PARAMETER PSTNGateway
OPTIONAL The FQDN of a PSTN gateway to apply the script to.
If a value is not provided and multiple PSTN gateways exist, script will ask during execution.

.PARAMETER DPOnly
OPTIONAL. Only create dial plan
This option is useful for when all required routes/PSTN usages already exist, and you require separate dialplans for different groups.
Command line only option.

.EXAMPLE
.\CA-ON-Toronto-MSTeams.ps1
Runs the script in interactive mode. Script will prompt user for information when required.

.LINK
https://ucken.blogspot.com/2012/01/complete-guide-to-lync-optimizer.html

.NOTES
 -Works on Microsoft Teams environments with Enterprise Voice

Generated by UCDialPlans.com v.{cVersion} on 2025-Mar-14
Copyright © 2025 by Ken Lasko. Do not reproduce without permission.
https://www.ucdialplans.com
https://ucken.blogspot.com
You must read and abide by the terms of service at https://www.ucdialplans.com/termsofservice.htm

To import the rules into Microsoft Teams, please save this file as a .ps1 (Powershell script). 
Run the program from Microsoft Teams Powershell by typing .\CA-ON-Toronto-MSTeams.ps1 
#>


# The below settings are for applying command line options for unattended script application
param (
	# Input the PSTN Gateway name. Only necessary if multiple PSTN gateways are assigned to a mediation pool
	[Parameter(ValueFromPipeline = $False, ValueFromPipelineByPropertyName = $True)]
	[ValidateNotNullOrEmpty()]
	[string] $PSTNGateway,

	# Create only a dial plan. No routes/PSTN usages etc.
	[Parameter(ValueFromPipeline = $False, ValueFromPipelineByPropertyName = $True)]
	[ValidateNotNullOrEmpty()]
	[switch] $DPOnly,

	# Input the OverrideAdminDomain. Use if you normally have to enter your onmicrosoft.com domain name when signing onto O365
	[Parameter(ValueFromPipeline = $False, ValueFromPipelineByPropertyName = $True)]
	[ValidateNotNullOrEmpty()]
	[string] $OverrideAdminDomain
)

# $ErrorActionPreference can be set to SilentlyContinue, Continue, Stop, or Inquire for troubleshooting purposes
$Error.Clear()
$ErrorActionPreference = 'SilentlyContinue'

Try {
	Connect-MicrosoftTeams
}
Catch {
	Write-Warning 'Microsoft Teams PowerShell module not installed. Please install via Install-Module MicrosoftTeams, then run the script again.'
	Break
}

# Prompt user to create either tenant-global or tenant-user dialplans.
Write-Host
$Global = New-Object System.Management.Automation.Host.ChoiceDescription '&Global','Create tenant global dial plan.'
$User = New-Object System.Management.Automation.Host.ChoiceDescription '&User','Create tenant user-level dial plan'
$Skip = New-Object System.Management.Automation.Host.ChoiceDescription '&Skip','Skip dial plan creation'
$choices = [System.Management.Automation.Host.ChoiceDescription[]]($Global,$User,$Skip)
$message = 'Create global or user-level dial plan?'
$DialPlanSelect = $Host.UI.PromptForChoice($caption,$message,$choices,1)
Write-Host
If ($DialPlanSelect -eq 1) {
	Write-Host "Creating tenant user dial plan"
	$DPParent = "CA-ON-Toronto"
	New-CsTenantDialPlan $DPParent -Description "Normalization rules for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"
}
ElseIf ($DialPlanSelect -eq 0) {
	Write-Host 'Using tenant global dial plan'
	$DPParent = "Global"
}

$ExtDPParent = $DPParent

If ($DialPlanSelect -ne 2) {
	Write-Host "Creating normalization rules"
	$NR = @()
	$NR += New-CsVoiceNormalizationRule -Name 'CA-National' -Parent $DPParent -Pattern '^1?([2-9]\d\d[2-9]\d{6})\d*(\D+\d+)?$' -Translation '+1$1' -InMemory -Description "National number normalization for Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"
	$NR += New-CsVoiceNormalizationRule -Name 'CA-Service' -Parent $DPParent -Pattern '^([2-9]11)$' -Translation '$1' -InMemory -Description "Service number normalization for Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"
	$NR += New-CsVoiceNormalizationRule -Name 'CA-310Numbers' -Parent $DPParent -Pattern '^(310\d{4})$' -Translation '+$1' -InMemory -Description "310 number normalization for Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"
	$NR += New-CsVoiceNormalizationRule -Name 'CA-International-Ext' -Parent $DPParent -Pattern '^(?:\+|011)(1|7|2[07]|3[0-46]|39\d|4[013-9]|5[1-8]|6[0-6]|8[1246]|9[0-58]|2[1235689]\d|24[013-9]|242\d|3[578]\d|42\d|5[09]\d|6[789]\d|8[035789]\d|9[679]\d)(?:0)?(\d{5,14})\D+(\d+)$' -Translation '+$1$2;ext=$3' -InMemory -Description "International extension number normalization for Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"
	$NR += New-CsVoiceNormalizationRule -Name 'CA-International' -Parent $DPParent -Pattern '^(?:\+|011)(1|7|2[07]|3[0-46]|39\d|4[013-9]|5[1-8]|6[0-6]|8[1246]|9[0-58]|2[1235689]\d|24[013-9]|242\d|3[578]\d|42\d|5[09]\d|6[789]\d|8[035789]\d|9[679]\d)(?:0)?(\d{5,14})(\D+\d+)?$' -Translation '+$1$2' -InMemory -Description "International number normalization for Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"

	Set-CsTenantDialPlan -Identity $DPParent -NormalizationRules @{add=$NR}
}

# If DPOnly option selected (meaning to only create dialplan), quit the program here.
If ($DPOnly) {
	Write-Host 'Finished!'
	Exit
}

# Check for existence of PSTN gateways and prompt to add PSTN usages/routes
If (($PSTNGateway -eq $NULL) -or ($PSTNGateway -eq '')) {
	$PSTNGW = Get-CsOnlinePSTNGateway
	If (($PSTNGW.Identity -eq $NULL) -and ($PSTNGW.Count -eq 0)) {
		Write-Host
		Write-Host 'No PSTN gateway found. If you want to configure Direct Routing, you have to define at least one PSTN gateway Using the New-CsOnlinePSTNGateway command.' -ForegroundColor Yellow
		Exit
	}

	If ($PSTNGW.Count -gt 1) {
		$PSTNGWList = @()
		Write-Host
		Write-Host "ID    PSTN Gateway"
		Write-Host "==    ============"
		For ($i=0; $i -lt $PSTNGW.Count; $i++) {
			$a = $i + 1
			Write-Host ($a, $PSTNGW[$i].Identity) -Separator "     "
		}

		$Range = '(1-' + $PSTNGW.Count + ')'
		Write-Host
		$Select = Read-Host "Select a primary PSTN gateway to apply routes" $Range

		If (($Select.ToInt32($NULL) -gt $PSTNGW.Count) -or ($Select -lt 1)) {
			Write-Host 'Invalid selection' -ForegroundColor Red
			Exit
		} Else {
			$PSTNGWList += $PSTNGW[$Select-1]
		}

		$Select = Read-Host "OPTIONAL - Select a secondary PSTN gateway to apply routes (or 0 to skip)" $Range

		If (($Select.ToInt32($NULL) -gt $PSTNGW.Count) -or ($Select -lt 0)) {
			Write-Host 'Invalid selection' -ForegroundColor Red
			Exit
		}
		ElseIf ($Select -gt 0) {
			$PSTNGWList += $PSTNGW[$Select-1]
		}
	}
	Else { # There is only one PSTN gateway
		$PSTNGWList = Get-CSOnlinePSTNGateway
	}
} Else {
	$PSTNGWInputList = $PSTNGateway.Split(',').Trim()
	$PSTNGWList = @()
	ForEach ($PSTNGWInput in $PSTNGWInputList) {
		$PSTNGW = Get-CSOnlinePSTNGateway $PSTNGWInput -ErrorAction SilentlyContinue
		If (($PSTNGW.Identity -eq $NULL)) {
			Write-Host
			Write-Host "Could not find $PSTNGWInput in the tenant. Verify the name using Get-CsOnlinePSTNGateway." -ForegroundColor Yellow
			Write-Host 'Will attempt to use the PSTN gateway as entered, in case tenant is using Microsoft SuperTrunks.' -ForegroundColor Yellow
			$PSTNGWList += New-CsOnlinePSTNGateway -Identity $PSTNGWInput -SipSignalingPort 5061 -InMemory -ErrorAction SilentlyContinue
		} Else {
			$PSTNGWList += $PSTNGW
		}
	}
}

$CA_LocalList = ,'CA-ON-Toronto-Local'
$CA_MobileList = $NULL
$CA_PremiumList = ,'CA-ON-Toronto-Premium'
$CA_NationalList = ,'CA-ON-Toronto-National'
$CA_InternationalList = ,'CA-ON-Toronto-International'

If ((Get-CsOnlineVoiceRoutingPolicy | Where-Object {$_.Identity -notlike 'CA-ON-Toronto-*'}).Count -gt 0) {
	If ($PSCmdlet.MyInvocation.BoundParameters["LeastCostRouting"].IsPresent -eq $NULL) {
		Write-Host
		$yes = New-Object System.Management.Automation.Host.ChoiceDescription '&Yes','Will configure the voice policies for least-cost/failover routing'
		$no = New-Object System.Management.Automation.Host.ChoiceDescription '&No','Will not configure the voice policies for least-cost/failover routing'
		$choices = [System.Management.Automation.Host.ChoiceDescription[]]($yes,$no)
		$message = 'Configure voice policies for least-cost/failover routing?'
		$FailoverRouting = $Host.UI.PromptForChoice($caption,$message,$choices,1)
		Write-Host
	} Else {
		If ($LeastCostRouting -eq $TRUE) {
			$FailoverRouting = 0
		} Else {
			$FailoverRouting = 1
		}
	}

	If($FailoverRouting -eq 0) {
		Write-Host "Calculating least-cost/failover routing tables"

		# If user entered LCRSite list, split the string into an array
		If (($LCRSites -ne '') -and ($LCRSites -ne $NULL)) {$LCRList = $LCRSites -split ','}

		# Create Powershell lists with the words Local, Mobile, National, International in all supported languages
		$LocalLang = 'Lokal','Teghakan','Lokální','Dangdì','Lokaal','Local','Kohalik','Paikallinen','Locales','Adgilobrivi','Topiká','Lokalno','Helyi','Locali','Rokaru','Jibang-ui','Vietejs','Vietinis','Lokalen','Lokalny','Mestnyy','Miestne','Lokalni','Lokalt','Yerel','Mistsevyy','Tempatan'
		$MobileLang = 'ILëvizshëm','Ssharzhakan','Mobilní','Yídòng','Mobiel','Mobile','Mobiilne','Käsipuhelin','Mobiluri','Kinitó','Mobitel','Ponsel','Cellulari','Geitaidenwa','Mobail','Mobils','Mobilus','Mobilni','Komórkowy','Celular','Mobilnyy','Mobilné','Móvil','Medunarodni','Bimbit'
		$NationalLang = 'Kombëtar','Azgayin','Národní','Guó','National','Nationaal','Riiklik','Valtakunnallinen','Nationale','Erovnuli','Ethnikí','Nacionalni','Nemzeti','Nasional','Nazionali','Nashonaru','Guggaui','Valsts','Nacionalinis','Nacionalna','Nasjonal','Krajowy','Natsionalnyy','Celoštátna','Državni','Nationellt','Ulusal','Negara'
		$InternationalLang = 'Ndërkombëtar','Mijazgayin','Mezinárodní','GuójìDe','International','Internationaal','Rahvusvaheline','Kansainvälinen','Internationales','SaertAshoriso','Diethní','Internacionala','Nemzetközi','Internasional','Internazionali','Intanashonaru','Gugje','Starptautisks','Tarptautinis','Meg´unaroden','Internasjonal','Miedzynarodowy','Internationala','Mezhdunarodnyy','Medzinárodné','Internationellt','Uluslararasi','Mizhnarodnyy','Antarabangsa'

		# Create an editable array of all NANPA countries
		$NANPACountries = 'AI','AN','AS','BA','BD','BM','BV','CA','CQ','DM','DR','GN','GU','JM','KA','LC','MP','PR','RT','SM','TC','TT','US','VI','ZF'
		[System.Collections.ArrayList]$NANPACountries = $NANPACountries
		# Remove the source country from the list
		$NANPACountries.Remove('CA')

		If (($LCRSites -ne '') -and ($LCRSites -ne $NULL)) {
			# Create a list of all local, national and international PSTN usages for any NANPA countries that might be defined.
			$NANPA_Locallist = (Get-CsOnlinePstnUsage).Usage | Where {$NANPACountries -cmatch ($_.SubString(0,2))+'$' -and $_ -like '*-Local' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
			$NANPA_NationalList = (Get-CsOnlinePstnUsage).Usage | Where {$NANPACountries -cmatch ($_.SubString(0,2))+'$' -and $_ -like '*-National' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
			$NANPA_InternationalList = (Get-CsOnlinePstnUsage).Usage | Where {$NANPACountries -cmatch ($_.SubString(0,2))+'$' -and $_ -like '*-International' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}

			# Create a list of all local, national and international PSTN usages for least-cost routing
			$CA_LocalList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -like "CA-*-Local" -and $_ -ne "CA-ON-Toronto-Local" -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
			$Int_LocalList = (Get-CsOnlinePstnUsage).Usage | Where {$LocalLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*' -and $_ -ne 'Local' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}

			$Int_MobileList = (Get-CsOnlinePstnUsage).Usage | Where {$MobileLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}

			$CA_PremiumList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -like 'CA-*-Premium' -and $_ -ne "CA-ON-Toronto-Premium" -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
			$CA_NationalList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -Like 'CA-*-National' -and $_ -ne "CA-ON-Toronto-National" -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
			$Int_NationalList = (Get-CsOnlinePstnUsage).Usage | Where {!($NANPACountries -cmatch ($_.SubString(0,2))+'$') -and $NationalLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}

			$CA_InternationalList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -like 'CA-*-International' -and $_ -ne "CA-ON-Toronto-International" -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
			$Int_InternationalList = (Get-CsOnlinePstnUsage).Usage | Where {!($NANPACountries -cmatch ($_.SubString(0,2))+'$') -and $InternationalLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*' -and $LCRList -cmatch ($_.SubString(0,$_.Length - ($_.Length-$_.LastIndexOf('-'))))}
		} Else {
			# Create a list of all local, national and international PSTN usages for any NANPA countries that might be defined.
			$NANPA_Locallist = (Get-CsOnlinePstnUsage).Usage | Where {$NANPACountries -cmatch ($_.SubString(0,2))+'$' -and $_ -like '*-Local'}
			$NANPA_NationalList = (Get-CsOnlinePstnUsage).Usage | Where {$NANPACountries -cmatch ($_.SubString(0,2))+'$' -and $_ -like '*-National'}
			$NANPA_InternationalList = (Get-CsOnlinePstnUsage).Usage | Where {$NANPACountries -cmatch ($_.SubString(0,2))+'$' -and $_ -like '*-International'}

			# Create a list of all local, national and international PSTN usages for least-cost routing
			$CA_LocalList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -like "CA-*-Local" -and $_ -ne "CA-ON-Toronto-Local"}
			$Int_LocalList = (Get-CsOnlinePstnUsage).Usage | Where {$LocalLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*' -and $_ -ne 'Local'}
			$Int_MobileList = (Get-CsOnlinePstnUsage).Usage | Where {$MobileLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*'}
			$CA_PremiumList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -like 'CA-*-Premium' -and $_ -ne "CA-ON-Toronto-Premium"}
			$CA_NationalList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -like 'CA-*-National' -and $_ -ne "CA-ON-Toronto-National"}
			$Int_NationalList = (Get-CsOnlinePstnUsage).Usage | Where {!($NANPACountries -cmatch ($_.SubString(0,2))+'$') -and $NationalLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*'}
			$CA_InternationalList += (Get-CsOnlinePstnUsage).Usage | Where-Object {$_ -Like 'CA-*-International' -and $_ -ne "CA-ON-Toronto-International"}
			$Int_InternationalList = (Get-CsOnlinePstnUsage).Usage | Where {!($NANPACountries -cmatch ($_.SubString(0,2))+'$') -and $InternationalLang -cmatch ($_.SubString($_.Length - ($_.Length-$_.LastIndexOf('-')-1),($_.Length-$_.LastIndexOf('-')-1)))+'$' -and $_ -notlike 'CA-*'}
		}
	}
}

Write-Host 'Creating voice policies'
New-CsOnlineVoiceRoutingPolicy "CA-ON-Toronto-Local" -Description "Allows local calls from Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" -WarningAction:SilentlyContinue | Out-Null

# Only create National/International policies if user did not select LocalOnly command line option
If (!$LocalOnly) {
	New-CsOnlineVoiceRoutingPolicy "CA-ON-Toronto-National" -Description "Allows local-national calls from Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" -WarningAction:SilentlyContinue | Out-Null
	New-CsOnlineVoiceRoutingPolicy "CA-ON-Toronto-International" -Description "Allows local-national-international calls from Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" -WarningAction:SilentlyContinue | Out-Null
}

Write-Host 'Creating PSTN usages'
Set-CsOnlinePSTNUsage -Identity global -Usage @{Add="CA-ON-Toronto-Local"} -WarningAction:SilentlyContinue | Out-Null
Set-CsOnlinePSTNUsage -Identity global -Usage @{Add="CA-ON-Toronto-Service"} -WarningAction:SilentlyContinue | Out-Null

# Only create following PSTN usages if user did not select LocalOnly command line option
If (!$LocalOnly) {
	Set-CsOnlinePSTNUsage -Identity global -Usage @{Add="CA-ON-Toronto-National"} -WarningAction:SilentlyContinue | Out-Null
	Set-CsOnlinePSTNUsage -Identity global -Usage @{Add="CA-ON-Toronto-Premium"} -WarningAction:SilentlyContinue | Out-Null
	Set-CsOnlinePSTNUsage -Identity global -Usage @{Add="CA-ON-Toronto-International"} -WarningAction:SilentlyContinue | Out-Null
}

Write-Host 'Assigning PSTN usages to voice policies'
# It seems to take a while for PSTN usages to become available for usage, so if we get an error, wait a minute and try again.
$Iteration = 0
Do {
	Try {
		$PSTNUsageSetError = $False
		Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$CA_NationalList} -ErrorAction Stop
	}
	Catch {
		$PSTNUsageSetError = $True
		$Iteration++
		$Time = 60
		ForEach($i in (1..$Time)) {
			$Percentage = $i / $Time
			$Remaining = New-TimeSpan -Seconds ($Time - $i)
			$Message = "Round $Iteration`: PSTN usages not ready. Waiting for {1} before trying again. This may 10 minutes or longer." -f $Percentage, $Remaining
			Write-Progress -Activity $Message -PercentComplete ($Percentage * 100) -Status 'Waiting...'
			Start-Sleep 1
		}
	}
} While ($PSTNUsageSetError)

Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-Local" -OnlinePstnUsages @{Add=$CA_LocalList} | Out-Null
If ($NANPA_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-Local" -OnlinePstnUsages @{Add=$NANPA_Locallist} | Out-Null}
If ($Int_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-Local" -OnlinePstnUsages @{Add=$Int_LocalList} | Out-Null}
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-Local" -OnlinePstnUsages @{Add="CA-ON-Toronto-Service"} | Out-Null

# Don't assign local PSTN usage to National/International policies if least-cost routing isn't being used. Reduces processor usage and routing time
If($FailoverRouting -eq 1) {
	$CA_LocalList = $NULL
}

If ($CA_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Replace=$CA_LocalList} | Out-Null}
Else {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages $NULL -WarningAction:SilentlyContinue | Out-Null}
If ($NANPA_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$NANPA_Locallist} | Out-Null}
If ($CA_MobileList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$CA_MobileList} | Out-Null}
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$CA_NationalList} | Out-Null
If ($NANPA_NationalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$NANPA_NationalList} | Out-Null}
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add="CA-ON-Toronto-Service"} | Out-Null
If ($Int_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$Int_LocalList} | Out-Null}
If ($Int_MobileList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$Int_MobileList} | Out-Null}
If ($Int_NationalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-National" -OnlinePstnUsages @{Add=$Int_NationalList} | Out-Null}
If ($CA_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Replace=$CA_LocalList} | Out-Null}
Else {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages $NULL -WarningAction:SilentlyContinue | Out-Null}
If ($NANPA_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$NANPA_Locallist} | Out-Null}
If ($CA_MobileList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$CA_MobileList} | Out-Null}
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$CA_NationalList} | Out-Null
If ($NANPA_NationalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$NANPA_NationalList} | Out-Null}
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$CA_PremiumList} | Out-Null
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add="CA-ON-Toronto-Service"} | Out-Null
If ($Int_LocalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$Int_LocalList} | Out-Null}
If ($Int_MobileList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$Int_MobileList} | Out-Null}
If ($Int_NationalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$Int_NationalList} | Out-Null}
Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$CA_InternationalList} | Out-Null
If ($NANPA_InternationalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$NANPA_InternationalList} | Out-Null}
If ($Int_InternationalList -ne $NULL) {Set-CsOnlineVoiceRoutingPolicy -Identity "CA-ON-Toronto-International" -OnlinePstnUsages @{Add=$Int_InternationalList} | Out-Null}

# Prompt user if they want to apply PSTN usages to the Global voice policy.
Write-Host
Write-Host 'If desired, a set of dialing permissions and routes can be applied globally to all users.'
$Local = New-Object System.Management.Automation.Host.ChoiceDescription '&Local','Allow Local dialing via the Global voice policy'
$National = New-Object System.Management.Automation.Host.ChoiceDescription '&National','Allow National dialing via the Global voice policy'
$International = New-Object System.Management.Automation.Host.ChoiceDescription '&International','Allow International dialing via the Global voice policy'
$Skip = New-Object System.Management.Automation.Host.ChoiceDescription '&Skip','No changes to the Global voice policy'
$choices = [System.Management.Automation.Host.ChoiceDescription[]]($Local,$National,$International,$Skip)
$message = 'Assign PSTN usages to the Global Voice Policy?'
$VPSelect = $Host.UI.PromptForChoice($caption,$message,$choices,3)
Write-Host

# Configure Global voice policy as per user selection above
Switch ($VPSelect) {
	0 {Set-CsOnlineVoiceRoutingPolicy -Identity Global -OnlinePstnUsages @{Replace=(Get-CsOnlineVoiceRoutingPolicy CA-ON-Toronto-Local).OnlinePstnUsages} -Description "Allows local calls from Toronto, Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"}
	1 {Set-CsOnlineVoiceRoutingPolicy -Identity Global -OnlinePstnUsages @{Replace=(Get-CsOnlineVoiceRoutingPolicy CA-ON-Toronto-National).OnlinePstnUsages} -Description "Allows local-national calls from Toronto, Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"}
	2 {Set-CsOnlineVoiceRoutingPolicy -Identity Global -OnlinePstnUsages @{Replace=(Get-CsOnlineVoiceRoutingPolicy CA-ON-Toronto-International).OnlinePstnUsages} -Description "Allows local-national-international calls from Toronto, Canada | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14"}
}


Write-Host "Creating voice routes"
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-TollFree" -Priority 6 -OnlinePstnUsages "CA-ON-Toronto-Local" -OnlinePstnGatewayList $PSTNGWList.Identity -NumberPattern '^\+18(00|33|44|55|66|77|88)[2-9]\d{6}$' -Description "TollFree routing for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-Premium" -Priority 7 -OnlinePstnUsages "CA-ON-Toronto-Premium" -OnlinePstnGatewayList $PSTNGWList.Identity -NumberPattern '^\+1(900|976)[2-9]\d{6}$' -Description "Premium routing for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-National" -Priority 8 -OnlinePstnUsages "CA-ON-Toronto-National" -OnlinePstnGatewayList $PSTNGWList.Identity -NumberPattern '^\+1(?!(900|976))(25[07]|36[578]|41[68]|43[178]|51[49]|58[147]|70[59]|78[02]|90[25]|204|226|236|249|263|289|306|343|354|382|403|450|468|474|506|548|579|604|613|639|647|672|683|742|753|778|807|819|825|867|873|942|8(00|33|44|55|66|77|88))[2-9]\d{6}$' -Description "National routing for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-International" -Priority 10 -OnlinePstnUsages "CA-ON-Toronto-International" -OnlinePstnGatewayList $PSTNGWList.Identity -NumberPattern '^\+((1(?!(900|976))[2-9]\d\d[2-9]\d{6})|([2-9]\d{5,14}))' -Description "International routing for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-Service" -Priority 9 -OnlinePstnUsages "CA-ON-Toronto-Service" -OnlinePstnGatewayList $PSTNGWList.Identity -NumberPattern '^\+?([2-9]11)$' -Description "Service routing for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-310Numbers" -Priority 11 -OnlinePstnUsages "CA-ON-Toronto-Local" -OnlinePstnGatewayList $PSTNGWList.Identity -NumberPattern '^\+310\d{4}$' -Description "310 number routing for Toronto, Canada | 416-557 | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null

Write-Host 'Creating outbound translation rules'
$OutboundTeamsNumberTranslations = New-Object 'System.Collections.Generic.List[string]'
$OutboundPSTNNumberTranslations = New-Object 'System.Collections.Generic.List[string]'
New-CsTeamsTranslationRule -Identity "CA-ON-Toronto-AllCalls" -Pattern '^\+(1|7|2[07]|3[0-46]|39\d|4[013-9]|5[1-8]|6[0-6]|8[1246]|9[0-58]|2[1235689]\d|24[013-9]|242\d|3[578]\d|42\d|5[09]\d|6[789]\d|8[035789]\d|9[679]\d)(?:0)?(\d{5,14})(;ext=\d+)?$' -Translation '+$1$2' -Description " | Generated by UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
$OutboundTeamsNumberTranslations.Add("CA-ON-Toronto-AllCalls")

Write-Host 'Adding translation rules to PSTN gateways'
ForEach ($PSTNGW in $PSTNGWList) {
	Set-CsOnlinePSTNGateway -Identity $PSTNGW.Identity -OutboundTeamsNumberTranslationRules $OutboundTeamsNumberTranslations -OutboundPstnNumberTranslationRules $OutboundPSTNNumberTranslations -ErrorAction SilentlyContinue
}


Write-Host "Creating optimized local route #1"
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-Local-1" -Priority 0 -OnlinePstnUsages "CA-ON-Toronto-Local" -OnlinePstnGatewayList @{Add=$PSTNGWList.Identity} -NumberPattern '^\+1((289(20[01267]|21[02678]|22[149]|23[2346]|24[237]|25[5689]|26[1289]|27[057]|29[^2346]|30[^2389]|31[4578]|32[^012]|33[34]|34[249]|35[0179]|36[038]|37[^067]|38[04678]|39[02349]|40[01369]|41[02578]|42[^4567]|45[^0356]|46[^45]|47[12345]|48[2467]|49[6789]|50[^0149]|51[04]|52[19]|53[^45]|54[^79]|55[^1569]|56[^0678]|57[^569]|58[^0]|59[^89]|61[^0139]|62[^69]|63[01237]|64[^5679]|65[^0369]|66[01456]|69[2459]|71[59]|72[^3]|73[34]|74[^1235]|77[27]|78[59]|79[056]|80[^38]|81[^0126]|82[2456]|83[^016]|84[^1]|85[^58]|86[23457]|87[^167]|88[^067]|89[^357]|90[^2359]|91[^1289]|92[34]|93[0567]|94[^1239]|95[^0689]|96[1367]|97[01]|98[^359]|99[35789]|430|444|608|670|681|752|764))|(226(612)))' -Description "Local routing for Toronto, ON (416-557) |  UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null

Write-Host "Creating optimized local route #2"
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-Local-2" -Priority 1 -OnlinePstnUsages "CA-ON-Toronto-Local" -OnlinePstnGatewayList @{Add=$PSTNGWList.Identity} -NumberPattern '^\+1((742(2[2347]\d|36[89]|37[^389]|38[^348]|39[123]|5[38]\d|6[18]\d|74[457]|77[^0269]|88[567]|99[^489]|9[08]\d|200|210|400|701|899|(30|72)\d))|(647([^01]\d\d))|(548(431|879))|(519(316|927))|(437([^01]\d\d))|(416([^01]\d\d))|(365(20[^5689]|22[03458]|23[015]|24[2568]|25[^0123]|26[0257]|27[5679]|28[^39]|29[^146]|30[^189]|31[58]|32[2568]|33[^0467]|34[^023]|35[15]|36[01239]|37[0569]|38[^3469]|39[0567]|42[01]|43[05]|44[0345]|46[1235]|49[01235]|4[18]\d|50[^5]|51[456]|52[^249]|53[^5]|54[^3]|55[^45]|56[^18]|57[^25]|58[^89]|59[^15]|60[04568]|61[57]|62[25789]|63[056]|64[^037]|65[04568]|68[^28]|70[04789]|71[0279]|72[256]|73[^78]|74[4578]|75[023]|77[3578]|78[^4569]|80[34569]|81[89]|82[^4578]|83[01258]|84[479]|85[0128]|86[56]|87[^569]|88[2567]|89[01289]|90[1469]|92[02]|96[035]|97[057]|98[078]|99[04678]|217|665|765|955|69\d)))' -Description "Local routing for Toronto, ON (416-557) |  UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null

Write-Host "Creating optimized local route #3"
New-CsOnlineVoiceRoute -Name "CA-ON-Toronto-Local-3" -Priority 2 -OnlinePstnUsages "CA-ON-Toronto-Local" -OnlinePstnGatewayList @{Add=$PSTNGWList.Identity} -NumberPattern '^\+1((942([24689]\d\d))|(905(20[^7]|21[02469]|22[12346]|23[^35]|24[178]|25[^1239]|26[45678]|28[^09]|29[^567]|30[^489]|31[36]|33[04789]|36[^057]|39[1589]|40[^147]|41[23578]|42[^59]|46[^8]|47[^368]|48[^15]|49[^368]|51[034]|53[02349]|55[^1567]|56[^0123]|58[^19]|59[^246]|62[^0378]|64[029]|65[234]|66[039]|67[^459]|68[36]|69[^027]|6[01]\d|70[23679]|71[237]|72[4679]|73[1789]|74[04789]|75[^3]|76[^589]|77[013]|78[^68]|79[^7]|80[13458]|81[^018]|83[^0456]|85[^3]|86[^589]|87[^01]|88[^5]|89[01367]|8[24]\d|90[^256]|91[^124]|93[69]|94[^125]|95[16]|96[589]|99[^1234]|326|350|370|542|636|927|970|(27|45|50)\d)))' -Description "Local routing for Toronto, ON (416-557) |  UCDialPlans.com v.14.5.11 on 2025-Mar-14" | Out-Null
Write-Host 'Finished!'
