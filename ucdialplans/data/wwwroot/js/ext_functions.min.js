window.addEventListener("load", e => { ResetForm() }), document.getElementById("ExtSubmitButton").addEventListener("click", e => { ValidateandSend() }); var dataObject = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}], hotElement = document.querySelector("#hot"), hotElementContainer = hotElement.parentNode, e164_validator_regexp = /^((1[2-9]\d\d[2-9]\d{0,6})|([2-9]\d{4,14}))$/, e164_validator_fn = function (e, t) { setTimeout(function () { /^((1[2-9]\d\d[2-9]?\d{0,6})|([2-9]\d{4,14}))$/.test(e) ? t(!0) : (t(!1), alert("Phone number base can only contain numbers.")) }) }, numerictext0_validator_regexp = /^\d*$/, numerictext1_validator_regexp = /^\d+$/, text_validator_fn = function (e, t) { setTimeout(function () { /^[\w|-]*$/.test(e) ? t(!0) : (t(!1), alert("Suffix can only include letters, numbers, dashes or underscore characters")) }) }, hotSettings = { data: dataObject, licenseKey: "non-commercial-and-evaluation", columns: [{ data: "extName", type: "text", width: 100, validator: text_validator_fn, allowInvalid: !1 }, { data: "DID", type: "checkbox", className: "htCenter", width: 36 }, { data: "SingleNum", type: "checkbox", className: "htCenter", width: 36 }, { data: "Base", type: "text", validator: e164_validator_fn, allowInvalid: !1 }, { data: "extStart", type: "text", width: 60, validator: numerictext1_validator_regexp, allowInvalid: !1 }, { data: "extEnd", type: "text", width: 60, validator: numerictext0_validator_regexp, className: "disableCell", readOnly: !1, allowInvalid: !1 }, { data: "extDigits", type: "dropdown", width: 50, className: "disableCell", readOnly: !1, source: [] }, { data: "S4BOnly", type: "checkbox", className: "htCenter", width: 60 }, { data: "Example", type: "text", width: 180, readOnly: !0 }], stretchH: "all", autoWrapRow: !0, height: 770, maxRows: 50, minSpareRows: 1, allowRemoveColumn: !1, allowInsertColumn: !1, enterBeginsEditing: !1, rowHeaders: !0, colHeaders: ['Rule Suffix<div style="font-size: 0.8em">(Optional)</div><a onclick="popUp(\'help_suffix.htm\');"><i class="fa fa-question-circle fa-2x"></i></a>', 'DID<br><a onclick="popUp(\'help_DID.htm\');"><i class="fa fa-question-circle fa-2x"></i></a>', 'Single<br><a onclick="popUp(\'help_singlenum.htm\');"><i class="fa fa-question-circle fa-2x"></i></a>', "Main Number Prefix", "Extension<br>Start", "Extension<br>End", "# of Ext<br>Digits<br>in DID", 'S4B Only<br><a onclick="popUp(\'help_s4bonly.htm\');"><i class="fa fa-question-circle fa-2x"></i></a>', "Normalized Example"], afterValidate: function (e, t, l, a, n) { if (e && "extEnd" === a) { var s = t.toString().length; if (null !== this.getDataAtCell(l, 4)) { if (s !== this.getDataAtCell(l, 4).length && 0 !== s) return alert("Extension Start and Extension End must both be the same length"), !1; if (t <= this.getDataAtCell(l, 4) && t > 0) return alert("Extension End must be larger than Extension Start"), !1 } } }, beforeChange: function (e, t) { if ("loadData" !== t && 1 !== e.length) for (var l = 0; l < e.length; l++) { var a = e[l][0], n = e[l][1], s = e[l][3]; if ("DID" === n) { if ("TRUE" === s.toUpperCase()) { var o = this.getCellMeta(a, 6); o.className = (o.className + "").replace("disableCell", "").trim(), o.readOnly = !1, isDID = !0 } else isDID = !1 } else if ("extStart" === n) { var d = s.length, o = this.getCellMeta(a, 6); if (o.source = [], isDID) { for (var r = 1; r <= d; r++)o.source.push(r.toString()); this.setDataAtCell(a, 6, d.toString()) } else this.setDataAtCell(a, 6, ""), o.readOnly = !0 } else "extDigits" === n && isDID && this.setDataAtCell(a, 6, s.toString()) } }, afterChange: function (e, t) { if ("loadData" !== t && !(e.length > 1)) { var l = e[0][0], a = e[0][1], n = e[0][3]; if ("DID" === a) { var s = this.getCellMeta(l, 6); !0 === n && null !== this.getDataAtCell(l, 4) ? (s.className = (s.className + "").replace("disableCell", "").trim(), s.readOnly = !1, this.setDataAtCell(l, 6, this.getDataAtCell(l, 4).length.toString())) : (s.className = "disableCell", this.setDataAtCell(l, 6, null), s.readOnly = !0, !0 === this.getDataAtCell(l, 2) && !1 === n && this.setDataAtCell(l, 2, !1)) } if ("SingleNum" === a) { var o = this.getCellMeta(l, 5), s = this.getCellMeta(l, 6); !0 === n ? (this.setDataAtCell(l, 1, !0), o.className = "disableCell", s.className = "disableCell", o.readOnly = !0, s.readOnly = !0) : (s.className = (s.className + "").replace("disableCell", "").trim(), s.readOnly = !1, null !== this.getDataAtCell(l, 4) && (this.setDataAtCell(l, 6, this.getDataAtCell(l, 4).length.toString()), o.className = (o.className + "").replace("disableCell", "").trim(), o.readOnly = !1)) } if ("extStart" === a) { var d = n.length, o = this.getCellMeta(l, 5), s = this.getCellMeta(l, 6); for (i = 1, s.source = []; i <= d; i++)s.source.push(i.toString()); "" !== window.opener.document.getElementById("Start" + l).value && !0 === window.opener.document.getElementById("DID" + l).checked && !1 === window.opener.document.getElementById("SingleNum" + l).checked ? setTimeout(function () { !0 === this.getDataAtCell(l, 1) && (!1 === this.getDataAtCell(l, 2) || null === this.getDataAtCell(l, 2)) ? (s.className = (s.className + "").replace("disableCell", "").trim(), s.readOnly = !1, this.setDataAtCell(l, 6, d.toString())) : (s.className = "disableCell", s.readOnly = !0, this.setDataAtCell(l, 6, "")) }) : !0 === this.getDataAtCell(l, 1) && (!1 === this.getDataAtCell(l, 2) || null === this.getDataAtCell(l, 2)) ? (s.className = (s.className + "").replace("disableCell", "").trim(), s.readOnly = !1, this.setDataAtCell(l, 6, d.toString())) : (s.className = "disableCell", s.readOnly = !0, this.setDataAtCell(l, 6, "")), !0 === this.getDataAtCell(l, 2) && (this.setDataAtCell(l, 5, ""), o.className = "disableCell", o.readOnly = !0, s.className = "disableCell", s.readOnly = !0, this.setDataAtCell(l, 6, "")), "" === n || null === n ? (this.setDataAtCell(l, 5, ""), o.className = "disableCell", o.readOnly = !0) : (o.className = (o.className + "").replace("disableCell", "").trim(), o.readOnly = !1) } if ("extDigits" === a) { this.getDataAtCell(l, 3); var r = this.getDataAtCell(l, 4), c = this.getDataAtCell(l, 5), h = r.length - n; "object" != typeof r && "object" != typeof c && r.substring(0, h) !== c.substring(0, h) && !0 === this.getDataAtCell(l, 1) && (!1 === this.getDataAtCell(l, 2) || null === this.getDataAtCell(l, 2)) && "" !== c && (alert("With the selected setting, the first " + h + " digits of both Start and End must be the same."), this.setDataAtCell(l, 6, r.length.toString())) } ("DID" === a || "Base" === a || "extStart" === a || "extDigits" === a) && this.setDataAtCell(l, 8, "+" + UpdateExample(l)) } }, contextMenu: !0 }, hot = new Handsontable(hotElement, hotSettings); function UpdateExample(e) { var t = hot.getDataAtCell(e, 1), l = hot.getDataAtCell(e, 2), a = hot.getDataAtCell(e, 3), n = hot.getDataAtCell(e, 4), s = hot.getDataAtCell(e, 6), o = "", d = ""; return null === a && (a = ""), null === n && (n = ""), null === s && (s = 0), !0 === t || "TRUE" === t ? (o = "", d = n.substring(n.length - s, n.length)) : (o = ";ext=", d = n), (!0 === l || "TRUE" === l) && (o = "", d = ""), a + o + d } function ResetForm() { for (var e = 0; "" !== window.opener.document.getElementById("Base" + e).value;)hot.setDataAtCell(e, 0, window.opener.document.getElementById("ExtName" + e).value), hot.setDataAtCell(e, 1, window.opener.document.getElementById("DID" + e).checked), hot.setDataAtCell(e, 2, window.opener.document.getElementById("SingleNum" + e).checked), hot.setDataAtCell(e, 3, window.opener.document.getElementById("Base" + e).value.replace("+", "")), hot.setDataAtCell(e, 4, window.opener.document.getElementById("Start" + e).value), hot.setDataAtCell(e, 5, window.opener.document.getElementById("End" + e).value), hot.setDataAtCell(e, 7, window.opener.document.getElementById("LyncOnly" + e).checked), !0 === hot.getDataAtCell(e, 1) && "" != window.opener.document.getElementById("ExtDigits" + e).value && hot.setDataAtCell(e, 6, window.opener.document.getElementById("ExtDigits" + e).value), e += 1 } function ValidateandSend() { var e = !1; for (i = 0; i <= 49; i++)window.opener.document.getElementById("ExtName" + i).value = hot.getDataAtCell(i, 0), window.opener.document.getElementById("DID" + i).checked = hot.getDataAtCell(i, 1), window.opener.document.getElementById("SingleNum" + i).checked = hot.getDataAtCell(i, 2), window.opener.document.getElementById("Base" + i).value = hot.getDataAtCell(i, 3), window.opener.document.getElementById("Start" + i).value = hot.getDataAtCell(i, 4), window.opener.document.getElementById("End" + i).value = hot.getDataAtCell(i, 5), null !== hot.getDataAtCell(i, 3) && null !== hot.getDataAtCell(i, 4) && (e = !0, "" === hot.getDataAtCell(i, 6) ? window.opener.document.getElementById("ExtDigits" + i).value = "0" : window.opener.document.getElementById("ExtDigits" + i).value = hot.getDataAtCell(i, 6), window.opener.document.getElementById("LyncOnly" + i).checked = hot.getDataAtCell(i, 7)); !0 === e ? (window.opener.document.getElementById("Extensions").checked = !0, window.opener.document.getElementById("ExtensionsButton").value = "Click to add/edit extensions") : (window.opener.document.getElementById("Extensions").checked = !1, window.opener.document.getElementById("ExtensionsButton").value = "Click to add extensions"), window.close() }